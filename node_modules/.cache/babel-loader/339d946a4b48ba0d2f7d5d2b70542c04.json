{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\quizzical\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  console.log('rendered');\n  const [startGame, setStartGame] = React.useState(false);\n  const [quiz, setQuiz] = React.useState([]);\n  React.useEffect(() => {\n    async function getQuiz() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n\n      for (let i = 0; i < 4; i++) {}\n\n      setQuiz(data.results.map(question => {\n        let answer = [...question.incorrect_answers, question.correct_answer];\n        return {\n          question: question.question.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\"),\n          answer: answer.map(answer => {\n            return {\n              value: answer,\n              id: nanoid(),\n              isHeld: false\n            };\n          }),\n          correctAnswer: question.correct_answer\n        };\n      }));\n    }\n\n    getQuiz();\n  }, []);\n  console.log(quiz);\n\n  function holdAnswer(id) {\n    setQuiz(quiz.map(question => {\n      return {\n        question: question.question,\n        answer: question.answer.map(answer => {\n          return answer.id === id ? {\n            value: answer.value,\n            id: answer.id,\n            isHeld: !answer.isHeld\n          } : {\n            value: answer.value,\n            id: answer.id,\n            isHeld: answer.isHeld\n          };\n        }),\n        correctAnswer: question.correct_answer\n      };\n    }));\n  }\n\n  function startQuiz() {\n    setStartGame(prevStartGame => !prevStartGame);\n  }\n\n  function checkAnswers() {\n    console.log('New questions');\n  }\n\n  const allQuestions = quiz.map(question => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: question.question\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: question.answer.map(answer => /*#__PURE__*/_jsxDEV(Answers, {\n          isHeld: answer.isHeld,\n          answer: answer.value,\n          hold: () => holdAnswer(answer.id)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 46\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [!startGame ? /*#__PURE__*/_jsxDEV(Start, {\n      startQuiz: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this) : allQuestions, startGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-answers\",\n      onClick: checkAnswers,\n      children: \"Check answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Bubbles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AK4CGDMQGDylULFZ5/Bze7NjCKQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cristhiandcl8/Desktop/Cristhiandcl/fullStackPackages/react/quizzical/src/App.js"],"names":["React","Start","Question","Bubbles","nanoid","Answers","App","console","log","startGame","setStartGame","useState","quiz","setQuiz","useEffect","getQuiz","res","fetch","data","json","i","results","map","question","answer","incorrect_answers","correct_answer","replace","value","id","isHeld","correctAnswer","holdAnswer","startQuiz","prevStartGame","checkAnswers","allQuestions"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,KAAK,CAACW,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,KAAK,CAACW,QAAN,CAAe,EAAf,CAAxB;AAEAX,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,mBAAeC,OAAf,GAAyB;AACvB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAD,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAE,CAAjB,EAAoBA,CAAC,EAArB,EAAyB,CAExB;;AACDP,MAAAA,OAAO,CAAEK,IAAI,CAACG,OAAN,CAAeC,GAAf,CAAmBC,QAAQ,IACjC;AACE,YAAIC,MAAM,GAAG,CAAC,GAAGD,QAAQ,CAACE,iBAAb,EAAgCF,QAAQ,CAACG,cAAzC,CAAb;AACA,eAAO;AAACH,UAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAAV,CAAoBI,OAApB,CAA4B,SAA5B,EAAuC,GAAvC,EAA4CA,OAA5C,CAAoD,SAApD,EAA+D,GAA/D,CAAV;AACCH,UAAAA,MAAM,EAACA,MAAM,CAACF,GAAP,CAAWE,MAAM,IAAI;AAC1B,mBAAO;AAACI,cAAAA,KAAK,EAAEJ,MAAR;AACCK,cAAAA,EAAE,EAACzB,MAAM,EADV;AAEC0B,cAAAA,MAAM,EAAE;AAFT,aAAP;AAGD,WAJM,CADR;AAKKC,UAAAA,aAAa,EAAER,QAAQ,CAACG;AAL7B,SAAP;AAMD,OATK,CAAD,CAAP;AAUD;;AACDX,IAAAA,OAAO;AACR,GAnBD,EAmBG,EAnBH;AAqBAR,EAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AAEA,WAASoB,UAAT,CAAoBH,EAApB,EAAwB;AACtBhB,IAAAA,OAAO,CAACD,IAAI,CAACU,GAAL,CAASC,QAAQ,IACvB;AACE,aAAO;AAACA,QAAAA,QAAQ,EAACA,QAAQ,CAACA,QAAnB;AACCC,QAAAA,MAAM,EAAGD,QAAQ,CAACC,MAAV,CAAkBF,GAAlB,CAAsBE,MAAM,IAAI;AACtC,iBAAOA,MAAM,CAACK,EAAP,KAAcA,EAAd,GAAmB;AAACD,YAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAf;AAClBC,YAAAA,EAAE,EAAEL,MAAM,CAACK,EADO;AAElBC,YAAAA,MAAM,EAAE,CAACN,MAAM,CAACM;AAFE,WAAnB,GAE2B;AAACF,YAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAf;AACCC,YAAAA,EAAE,EAAEL,MAAM,CAACK,EADZ;AAECC,YAAAA,MAAM,EAAEN,MAAM,CAACM;AAFhB,WAFlC;AAKD,SANO,CADT;AAOKC,QAAAA,aAAa,EAAER,QAAQ,CAACG;AAP7B,OAAP;AAQD,KAVK,CAAD,CAAP;AAWD;;AAED,WAASO,SAAT,GAAqB;AACnBvB,IAAAA,YAAY,CAACwB,aAAa,IAAI,CAACA,aAAnB,CAAZ;AACD;;AAED,WAASC,YAAT,GAAwB;AACpB5B,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;;AAED,QAAM4B,YAAY,GAAGxB,IAAI,CAACU,GAAL,CAASC,QAAQ,IAAI;AACxC,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE,QAAC,QAAD;AAAyB,QAAA,QAAQ,EAAEA,QAAQ,CAACA;AAA5C,SAAenB,MAAM,EAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,kBACImB,QAAQ,CAACC,MAAV,CAAkBF,GAAlB,CAAsBE,MAAM,iBAAI,QAAC,OAAD;AAAS,UAAA,MAAM,EAAEA,MAAM,CAACM,MAAxB;AAAgC,UAAA,MAAM,EAAEN,MAAM,CAACI,KAA/C;AAAsE,UAAA,IAAI,EAAE,MAAMI,UAAU,CAACR,MAAM,CAACK,EAAR;AAA5F,WAA2DL,MAAM,CAACK,EAAlE;AAAA;AAAA;AAAA;AAAA,gBAAhC;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOA,GARmB,CAArB;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACG,CAACpB,SAAD,gBAAa,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEwB;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAb,GAA+CG,YADlD,EAEG3B,SAAS,iBAAI;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,OAAO,EAAE0B,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFhB,eAGE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GApEQ7B,G;;KAAAA,G;AAsET,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\n\nfunction App() {\n\n  console.log('rendered')\n  const [startGame, setStartGame] = React.useState(false);\n  const [quiz, setQuiz] = React.useState([]);\n\n  React.useEffect(() => {\n    async function getQuiz() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n      for (let i=0; i <4; i++) {\n        \n      }\n      setQuiz((data.results).map(question => \n        {\n          let answer = [...question.incorrect_answers, question.correct_answer]\n          return {question:(question.question).replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\"), \n                  answer:answer.map(answer => {\n                    return {value: answer,\n                            id:nanoid(),\n                            isHeld: false}\n                  }), correctAnswer: question.correct_answer}\n        }));\n    }\n    getQuiz();\n  }, []);\n\n  console.log(quiz)\n\n  function holdAnswer(id) {\n    setQuiz(quiz.map(question => \n      {\n        return {question:question.question, \n                answer: (question.answer).map(answer => {\n                  return answer.id === id ? {value: answer.value,\n                          id: answer.id,\n                          isHeld: !answer.isHeld} : {value: answer.value,\n                                                     id: answer.id,\n                                                     isHeld: answer.isHeld}\n                }), correctAnswer: question.correct_answer}\n      }));\n  }\n\n  function startQuiz() {\n    setStartGame(prevStartGame => !prevStartGame)\n  }\n\n  function checkAnswers() {\n      console.log('New questions')\n  }\n\n  const allQuestions = quiz.map(question => {\n    return (\n        <div className=\"board\">\n          <Question key={nanoid()} question={question.question}/>\n          <div className=\"answers-container\">\n            {(question.answer).map(answer => <Answers isHeld={answer.isHeld} answer={answer.value} key={answer.id} hold={() => holdAnswer(answer.id)}/>)}\n          </div>\n        </div>\n  )})\n\n  return (\n    <div className=\"App\">\n      {!startGame ? <Start startQuiz={startQuiz} /> : allQuestions}\n      {startGame && <button className=\"check-answers\" onClick={checkAnswers} >Check answers</button>}\n      <Bubbles />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}