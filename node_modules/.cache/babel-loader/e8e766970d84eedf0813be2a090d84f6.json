{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\quizzical\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [startGame, setStartGame] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  React.useEffect(() => {\n    async function getQuestion() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n      setQuestions(data.results);\n    }\n\n    getQuestion();\n  }, []);\n\n  function startQuiz() {\n    setStartGame(prevStartGame => !prevStartGame);\n  }\n\n  const allQuestions = questions.map(ques => {\n    let questionTranslated = ques.question.replace(/(&quot\\;)/g, '\"').replace(\"&#039;\", \"'\").replace(\"&eacute;\", \"e\");\n    let answers = [...ques.incorrect_answers, ques.correct_answer];\n    let answersWithId = answers.map(answer => {\n      return {\n        value: answer,\n        id: nanoid()\n      };\n    });\n    console.log(answersWithId);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: questionTranslated\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: answersWithId.map(answer => /*#__PURE__*/_jsxDEV(Answers, {\n          answer: answer.value.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\"),\n          hold: () => holdAnswer()\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 36\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  });\n  console.log(questions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [!startGame ? /*#__PURE__*/_jsxDEV(Start, {\n      startQuiz: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this) : allQuestions, startGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-answers\",\n      children: \"Check answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Bubbles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OCqXp9lgBBaidhDKEXrOif5xPHo=\");\n\n_c = App;\nexport default App; // const allQuestions = questions.map((ques) => {\n//   let questionTranslated = ques.question\n//     .replace(/(&quot\\;)/g, '\"')\n//     .replace(\"&#039;\", \"'\")\n//     .replace(\"&eacute;\", \"e\");\n//   let answers = [...ques.incorrect_answers, ques.correct_answer]\n//   return (\n//     <>\n//     <Question question={questionTranslated} key={nanoid()} />\n//     <div className=\"answers-container\">\n//     {answers.map(answer => <Answers answer={answer.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")} key={nanoid()} />)}\n//     </div>\n//     </>\n//   )\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cristhiandcl8/Desktop/Cristhiandcl/fullStackPackages/react/quizzical/src/App.js"],"names":["React","Start","Question","Bubbles","nanoid","Answers","App","startGame","setStartGame","useState","questions","setQuestions","useEffect","getQuestion","res","fetch","data","json","results","startQuiz","prevStartGame","allQuestions","map","ques","questionTranslated","question","replace","answers","incorrect_answers","correct_answer","answersWithId","answer","value","id","console","log","holdAnswer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\n\nfunction App() {\n  const [startGame, setStartGame] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n\n  React.useEffect(() => {\n    async function getQuestion() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n      setQuestions(data.results);\n    }\n    getQuestion();\n  }, []);\n\n  function startQuiz() {\n    setStartGame((prevStartGame) => !prevStartGame);\n  }\n\n  const allQuestions = questions.map((ques) => {\n    let questionTranslated = ques.question\n      .replace(/(&quot\\;)/g, '\"')\n      .replace(\"&#039;\", \"'\")\n      .replace(\"&eacute;\", \"e\");\n    let answers = [...ques.incorrect_answers, ques.correct_answer]\n    let answersWithId = answers.map(answer => {\n      return {value: answer, \n              id: nanoid()}})\n    console.log(answersWithId)\n    return (\n      <>\n      <Question question={questionTranslated} key={nanoid()} />\n      <div className=\"answers-container\">\n      {answersWithId.map(answer => <Answers answer={(answer.value).replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")} key={answer.id} hold={() => holdAnswer()}/>)}\n      </div>\n      </>\n    )\n  });\n\n  console\n    .log(questions)\n\n  return (\n    <div className=\"App\">\n      {!startGame ? <Start startQuiz={startQuiz} /> : allQuestions}\n      {startGame && <button className=\"check-answers\">Check answers</button>}\n      <Bubbles />\n    </div>\n  );\n}\n\nexport default App;\n\n\n// const allQuestions = questions.map((ques) => {\n//   let questionTranslated = ques.question\n//     .replace(/(&quot\\;)/g, '\"')\n//     .replace(\"&#039;\", \"'\")\n//     .replace(\"&eacute;\", \"e\");\n//   let answers = [...ques.incorrect_answers, ques.correct_answer]\n//   return (\n//     <>\n//     <Question question={questionTranslated} key={nanoid()} />\n//     <div className=\"answers-container\">\n//     {answers.map(answer => <Answers answer={answer.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")} key={nanoid()} />)}\n//     </div>\n//     </>\n//   )\n// });"]},"metadata":{},"sourceType":"module"}