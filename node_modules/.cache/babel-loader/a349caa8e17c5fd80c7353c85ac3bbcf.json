{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\quizzical\\\\src\\\\App.js\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [startGame, setStartGame] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  const [isHeld, setIsHeld] = React.useState(false);\n  const [answer, setAnswer] = React.useState([]); // let answers = [];\n\n  React.useEffect(() => {\n    async function getQuestion() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n      setQuestions(data.results);\n    }\n\n    getQuestion();\n  }, []);\n\n  function startQuiz() {\n    setStartGame(prevStartGame => !prevStartGame);\n  }\n\n  function holdAnswer(id) {\n    setAnswer(answer.map(answer => {\n      return answer.id === id ? { ...answer,\n        isHeld: !answer.isHeld\n      } : answer;\n    }));\n    console.log(answer);\n  }\n\n  const allQuestions = _s(questions.map(_s(ques => {\n    _s();\n\n    let questionTranslated = ques.question.replace(/(&quot\\;)/g, '\"').replace(\"&#039;\", \"'\").replace(\"&eacute;\", \"e\");\n    let answersWithoutId = [...ques.incorrect_answers, ques.correct_answer];\n    React.useEffect(() => {\n      tAnswer(answersWithoutId.map(answer => {\n        return {\n          value: answer,\n          id: nanoid(),\n          isHeld: false\n        };\n      }));\n    });\n    se;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: questionTranslated\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: answer.map(answer => /*#__PURE__*/_jsxDEV(Answers, {\n          isHeld: answer.isHeld,\n          answer: answer.value.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\"),\n          hold: () => holdAnswer(answer.id)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [!startGame ? /*#__PURE__*/_jsxDEV(Start, {\n      startQuiz: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }, this) : allQuestions, startGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-answers\",\n      children: \"Check answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Bubbles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"7BYCQwiPkbsB2l80OPIv4vu8oMo=\");\n\n_c = App;\nexport default App; // const allQuestions = questions.map((ques) => {\n//   let questionTranslated = ques.question\n//     .replace(/(&quot\\;)/g, '\"')\n//     .replace(\"&#039;\", \"'\")\n//     .replace(\"&eacute;\", \"e\");\n//   let answers = [...ques.incorrect_answers, ques.correct_answer]\n//   return (\n//     <>\n//     <Question question={questionTranslated} key={nanoid()} />\n//     <div className=\"answers-container\">\n//     {answers.map(answer => <Answers answer={answer.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")} key={nanoid()} />)}\n//     </div>\n//     </>\n//   )\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cristhiandcl8/Desktop/Cristhiandcl/fullStackPackages/react/quizzical/src/App.js"],"names":["React","Start","Question","Bubbles","nanoid","Answers","App","startGame","setStartGame","useState","questions","setQuestions","isHeld","setIsHeld","answer","setAnswer","useEffect","getQuestion","res","fetch","data","json","results","startQuiz","prevStartGame","holdAnswer","id","map","console","log","allQuestions","ques","questionTranslated","question","replace","answersWithoutId","incorrect_answers","correct_answer","tAnswer","value","se"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Start from \"./Start\";\nimport Question from \"./Question\";\nimport Bubbles from \"./Bubbles\";\nimport { nanoid } from \"nanoid\";\nimport Answers from \"./Answers\";\n\nfunction App() {\n  const [startGame, setStartGame] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  const [isHeld, setIsHeld] = React.useState(false);\n  const [answer, setAnswer] = React.useState([]);\n  // let answers = [];\n\n  React.useEffect(() => {\n    async function getQuestion() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=4\");\n      const data = await res.json();\n      setQuestions(data.results);\n    }\n    getQuestion();\n  }, []);\n\n  function startQuiz() {\n    setStartGame((prevStartGame) => !prevStartGame);\n  }\n\n  function holdAnswer(id) {\n    setAnswer(\n      answer.map((answer) => {\n        return answer.id === id\n          ? { ...answer, isHeld: !answer.isHeld }\n          : answer;\n      })\n    );\n    console.log(answer);\n  }\n\n  const allQuestions = questions.map((ques) => {\n    let questionTranslated = ques.question\n      .replace(/(&quot\\;)/g, '\"')\n      .replace(\"&#039;\", \"'\")\n      .replace(\"&eacute;\", \"e\");\n    let answersWithoutId = [...ques.incorrect_answers, ques.correct_answer];\n    React.useEffect(() => {\n      tAnswer(\n        answersWithoutId.map((answer) => {\n          return { value: answer, id: nanoid(), isHeld: false };\n        })\n      );\n    })\n    se\n    return (\n      <>\n        <Question question={questionTranslated} key={nanoid()} />\n        <div className=\"answers-container\">\n          {answer.map((answer) => (\n            <Answers\n              isHeld={answer.isHeld}\n              answer={answer.value.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")}\n              key={answer.id}\n              hold={() => holdAnswer(answer.id)}\n            />\n          ))}\n        </div>\n      </>\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      {!startGame ? <Start startQuiz={startQuiz} /> : allQuestions}\n      {startGame && <button className=\"check-answers\">Check answers</button>}\n      <Bubbles />\n    </div>\n  );\n}\n\nexport default App;\n\n// const allQuestions = questions.map((ques) => {\n//   let questionTranslated = ques.question\n//     .replace(/(&quot\\;)/g, '\"')\n//     .replace(\"&#039;\", \"'\")\n//     .replace(\"&eacute;\", \"e\");\n//   let answers = [...ques.incorrect_answers, ques.correct_answer]\n//   return (\n//     <>\n//     <Question question={questionTranslated} key={nanoid()} />\n//     <div className=\"answers-container\">\n//     {answers.map(answer => <Answers answer={answer.replace(\"&#039;\", \"s\").replace(\"&lrm;\", \"\")} key={nanoid()} />)}\n//     </div>\n//     </>\n//   )\n// });\n"]},"metadata":{},"sourceType":"module"}